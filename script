A. What we'll be making
Before we can get to creating our app let's look at what we're creating.
We're creating an application that connects to the moviedb api that'll allow us to
search the database choose a movie and and ahow some simple information like the release date and the synapses.
Then if we want to search something new we just click this little search button up here and we're back to searching again.

Now, the first thing we have to do when creating our app in React is plan how we would break down our app into components. 
Let's go ahead and break this down into components.  Top to bottom

We got a little search button that could be it's own thing for like a header which could be a component by it self

Then we have a search input that shows movies when typed in. So that all by it self can be a component. 
Then we have these cards displaying the search results title and backgrounds could be a component.


Then when we click on one of the these cards the search and search-results go away 
and the movie details show up. So this would be a completely seperate component from the search.

Let's call that movie details.

Last but not least we have simple footer which is always a good time to create a component. 

So next up we're going to setup the project with the necessary styles and links then get to creating these components

B.Setup Project
Files: style.css, animations.css 
0. ng new movie-search
1. npm install materialize-css --save
2. add paths to styles in angular-cli.json
3. add font link in index.html,   <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">  
4. add custom styles from the course files

C.Creating the component structure
So now we're going to create the structure of what we'd like to see using components it's time to create.
1. First I'd like you to take the challenge and create the structure of the app. 
    I don't mean creating exactly how it looks but just the components with some dummy text.
    So the search component just says search component or movie card says movie card so you can get use to 
    creating your components. Maybe nest components inside folders according to where the component will go in the app.
    Also, try to create them by hand and then also using the angular-cli.
    This'll help you get a grasp on creating an angular application.
    So go ahead, pause, the video and create those components and then we'll do it together.
2. So how do you think you did? Does the structure make since to you, if you came back to it a month 
    from now would you be able to jump back in and modify something?
3.Awesome, so let's go ahead and do it together. First let's go ahead and make this top header with the search button
    We'll go ahead and just make this a component with a inline-template
    called HeaderComponent. and for right now were just going to put in some filler text.

4.Now let's do the movie details we have here (show details component) with the poster
    image on the right side. Let's call that component display-movie and use the angular cli
    to make the external template and the component file by typing in the terminal
    ng g c displayMovie --inline-style true --flat true --spec false --prefix false
    and then just put some filler text in there. "Movie Details"

5.Then let's go ahead and create the search component. 
    And since this one has other components. We'll go ahead and make a folder with this one.
    using the angular-cli again
    ng g c search --inline-style true --spec false --prefix false
    Let's go ahead and put the input in this one.
6.Then remeber there's a lot of cards that show up that are like the preview of the movie 
    let's call them movie-preview,
    and use the anuglar cli to put them in the search foler by typing
    ng g c search/moviePreview --inline-style true --spec false --prefix false --flat true

    then let's go ahead and put some filler text and use that component a few times in our 
    search component

7.Last but not least let's make the footer component add call it footer and this time get the prefix
    that the cli gives us so that command would be
    ng g c footer --inline-style true --spec false --flat true
    And let's go ahead and put some filler text in there that just says "Footer" inside of a div
    Then put that in our app.component.html file

    Then we're done. Up next we'll go about styling each component with built&custom in classes

D.Creating the HTML/CSS for our components
    1.So now we're going to setup just how each of these components looks. No functionality yet 
    just adding the necessary elements and classes to make it look more like the finished product.
    2.Let's first start with the app component 
        <main>
        <div class="container">
            <search-movie class="row" ></search-movie>
            <display-movie class="row"></display-movie>
        </div>
        </main>  
    3. Now let's do the header
    <header>
        <div class="row">
            <div class="col s4 offset-s4 search-btn center-align">
                <span class="material-icons">search</span>
            </div>
        </div>
    </header>
    4. Next up let's do the footer 
        <footer class="page-footer">
            <div class="container">
                    <div class="row">
                        <div class="col l6 s12">
                                <h5 class="white-text">Database provided by 
                                <a href="https://www.themoviedb.org/">The Movie DB</a>
                                </h5>
                                <p class="grey-text text-lighten-4"></p>
                        </div>
                    </div>
            </div>
            <div class="footer-copyright">
                    <div class="container">
                        Designed and Developed by: Leon Watson
                    </div> 
            </div>
        </footer>
    5. Now it's time for the search component
        <div class="col s12">
            <input 
                class="search-input" 
                type="text" 
                placeholder="Search A Movie"
                [(ngModel)]="search" 
                >
            <div class="row">
                <movie-preview></movie-preview>
                <movie-preview></movie-preview>
                <movie-preview></movie-preview>
                <movie-preview></movie-preview>
                <movie-preview></movie-preview>
                <h3 [ngStyle]="{'text-align':center}">
                    No results found for {{search}} 
                </h3>
            </div>
        </div>
    6. Now let's get the movie preview component all setup
    <div class="col s12 m4" [ngClass]="['movie']">
      <div class="card blue-grey darken-1">
        <div class="card-content white-text">
          <span class="card-title">The Movie Title</span>
          <div class="movie-year">2017-8-10</div>
        </div>
      </div>
    </div>
    7. Last but not least the display movie component where we display the movies
        title, year, synapses and the img on the right
    <div class="col m7 s12">
        <h3 class="fade-in-right">The Movie Title</h3>
        <div class="row">
        <div class="tagline col m3 fade-in-right slower">2017-8-10</div>
        </div>
        <div class="row">
        <p class="flow-text col s12 fade-in-left slow">A cool insightful overview about this movie that makes you want to watch it.</p>
        </div>
    </div>
    <div class="col m5">
        <img class="movie-poster fade-in-left" 
            src="http://image.tmdb.org/t/p/original/rhIRbceoE9lR4veEXuwCC2wARtG.jpg" 
            alt=""
        >
    </div>
E. The Movie Interface
    So we're going to be working with the movie DB database. You can find the API here at
    https://developers.themoviedb.org/3/
    and we're going to go down here to see how we can search for movies using this API.
    So you'll see that we need to have an API key and query params for when we call this api.
    But what we're looking for is the object that is passed from it. Which is here under responses.
    And we're going to only use some of this information like the 
    export interface Movie {
        backdrop_path?:string|null
        poster_path?:string|null
        genres?:Object[]
        original_title?:string
        overview?:string
        title?:string
        tagline?:string|null
        release_date?:string
    }
    So we're going to go ahead and make an interface that has all these properties called Movie.
    This is going to tell Angular and Typescript what type of object we expect for our variables.
    So now we can use that every where we need it in the application for clarification.


F. Setting Up the Input and Outputs
    1.Now we're going to setup our input and outputs for our components.
    2.But first we're going to get some mock data, so we have something to work with. 
    You'll find in the course files a file called mock-data.ts that looks something like this.
     We're going to put that right here in the src folder to access. through out our app and delete it
     when we connect to the The Movie API.
    The data we'll be getting back from the API 
    are the search results with all the Movies according to a certain query,
    the baseURL of where to get the posters and background you saw in the application,
    and the different sizes of the pictures.

    2. Now let's use that mock data to start putting together our functionality
    //search.component.ts
    3. Let's start in the search.component.ts 
        where we'll import that the searchResults as data at the top.
    4. Then we'll create a variable called searchResults in our SearchComponent 
        class that'll be an Array of Movies and we'll import that interface so Typescript 
        knows what that type is.
    5. We'll initialize that to the data we're getting from the mock-data
    //search.component.html
    6. Now we're going to go to the template file for the search component
        and we're going to *ngFor="let movies of searchResults; let i = index;"
        directive and loop through our searchResults on the movie-preview component
    7. And pass each search result in as a property called movie that we'll create next
    //movie-preview.component.ts
    8. So now go to the movie-preview component ts file
    9. and we're going to import Input from angular core so we can put an input on out 
        movie-preview component
    10. We're also going to import that movie interface we created
    11. Then we're going to call this input movie with a type of Movie
    // movie-preview.component.html
    12. Now let's go to out movie-preview template 
    13. print out the movie.title and the movie.release_date 
    14. Last Input that we'll need to do is in the app component so 
        let's open the app.component.ts.
    //app.component.ts
    15. We're going to import that Movie interface we made 
        then create a variable inside the component called currentMovie with the type
        Movie and initialize it to be null
    //app.component.html
    16. Then we'll go to the template file and send that currentMovie variable to the 
        display-movie component as a property called movie
    16.5. and we're going to have an event for when a movie-preview
        card is clicked. For right now we'll just create a function to handle the click
        called setCurrentMovie and console.log(movie) that movie that send to that function.
    //display-movie.component.ts
    17. Now let's go to the display movie component and import Input from angular core
        and the Movie interface 
    18. Then down in the component let's create that input variable and call it movie
    //display-movie.component.html
    19. Now inside the template and let's go ahead and use that movie variable 
        for the: 
        1. movie.title
        2. movie.release_date 
        3. movie.overview
        4. movie.title for alt
        5. create a function called getFullPosterUrl(movie.poster_path)
    20. The reason we have to make this function is because the api only sends a relative
        URL and we'll get the base url from it using a complete different request
    //display-movie.component.ts
    21. for right now we'll return the poster from the Avengers movie
        http://cdn.collider.com/wp-content/uploads/the-avengers-robert-downey-jr-iron-man-poster.jpg
    
    22. So there we go, we setup the inputs and outputs for our application!

G. The Movie Service and the Current Movie
    1.At the moment we have the current movie variable but it's just an empty object 
        and doesn't change when we click on the movie-preview cards. Now we could setup 
        an event chain from the search component to the app component to get the selected movie
        but instead we're going to use a service to hold that data instead of making the app.component
        reliant on that event to get the currentMovie.

    2. So let's go ahead and make our service using the cli using this command
        ng g service movieService --spec false --module app.module.ts
        This will create a service called MovieService and provide it in our app.module so
        we can inject it anywhere in our application
    //movie.service.ts
    3. We're going to import Observable and Observer from 
    import { Observable } from 'rxjs/Observable';
    import { Observer } from 'rxjs/Observer';
        because we are going to create an Obeservable for the currentMovie 
        that is the selected in the application and going to need an Observer to 
        observer that Observable. 
        This would be a good time to use a library like flux or redux but since this application
        is so small having it done in a service would be the quickest and easiest way using what
        we've learned so far.
        and let's also import that Movie interface we made. 
    So now we'll give the service a private variable called 
        private selectedMovie:Observable<Movie>
        private movieObserver:Observer<Movie>
    and now in the constructor of our service we'll initialize that Observable
    and set the value of the observer as well.
        constructor() { 
            this.selectedMovie = Observable.create((observer:Observer<Movie>)=>{
                this.movieObserver = observer
            })
        } 
    then well also make a get variable call currentMovie that'll return 
    our selectedMovie variable so we can access to that Observable to subscribe to.

    last thing we need to do is create a function that will call that next function on our observer
    when the currentMovie is changed.

    changeSelectedMovie(movie:Movie){
        this.movieObserver.next(movie)
    }

    Great so now we can go ahead and use this to set the currentMovie and get the current movie 
    in other components
H. Getting the CurrentMovie from the service.
    Alright so we've create this movie service and provided to our application.
    So now all we need to do is inject it into the components that need it and use 
    the properties and functions.

    //app.component.ts
    1.In here we'll first import the movie service
    2. Then we'll inject it inside our component
    3. Then also in the constructor we'll subscribe to the currentMovie observable
    constructor(private movieService:MovieService){
        movieService
        .currentMovie
        .subscribe(movie => {
            this.currentMovie = movie
        })
    }
    so now whenever that next function is called on the observer in the service the 
    movie will be passed to this function and set our currentMovie variable.
    //app.component.html
    4.Now in our app.component.html file we'll go ahead and use the *ngif attribute directive 
    to only show the display-movie component when there is a movie and the search component 
    when there isn't 
    //search.component.ts
    5.This is where we have a click function that changes the current movie so
    we're going go ahead and connect it to the movie service.
    6.So let's import the movie service
    7.and inject into our component in the constructor
    8. now in the setCurrentMovie function let's get rid of the console.log and 
        use the movie to set the currentMovie 
    9. And there we go we've connected the movieService to components to share data across them.

    


    